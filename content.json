{"meta":{"title":"xiaogui","subtitle":null,"description":null,"author":"xiaoguiwk","url":"http://xiaoguiwk.xyz","root":"/"},"pages":[{"title":"about","date":"2019-08-18T08:11:10.000Z","updated":"2019-08-18T13:11:48.961Z","comments":true,"path":"about.html","permalink":"http://xiaoguiwk.xyz/about.html","excerpt":"","text":"这个人很懒，什么都没有留下.This guy is very lazy, nothing left."},{"title":"categories","date":"2019-08-18T08:06:12.000Z","updated":"2019-08-18T08:06:12.999Z","comments":true,"path":"categories/index.html","permalink":"http://xiaoguiwk.xyz/categories/index.html","excerpt":"","text":""},{"title":"All tags","date":"2019-08-17T14:31:13.000Z","updated":"2019-08-17T14:32:20.522Z","comments":true,"path":"tags/index.html","permalink":"http://xiaoguiwk.xyz/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"豆瓣电影爬虫（一）思路","slug":"豆瓣电影爬虫（一）思路","date":"2019-08-22T06:05:51.000Z","updated":"2019-08-22T07:54:06.109Z","comments":true,"path":"2019/08/22/豆瓣电影爬虫（一）思路/","link":"","permalink":"http://xiaoguiwk.xyz/2019/08/22/豆瓣电影爬虫（一）思路/","excerpt":"豆瓣收录的电影数量非常大，如何尽可能多的拿到电影的编号是最大的难题。本文的思路仅仅是通过tags分类得到更多的编号，并没有拿到所有编号的解决方案。","text":"豆瓣收录的电影数量非常大，如何尽可能多的拿到电影的编号是最大的难题。本文的思路仅仅是通过tags分类得到更多的编号，并没有拿到所有编号的解决方案。 目标网站豆瓣电影电影分类 页面分析 关于如何分析异步加载、获取json数据、判断请求方式、请求头需要携带的参数等等略过。 打开电影分类的网页得到的页面如下图： ![豆瓣电影分类](/images/豆瓣电影爬虫（一）思路/1.jpg) 通过观察这个页面，可以发现这个页面基本上已经做到我想要的东西了。。。但是话说回来，我要做的是：把这个页面爬下来，再爬下来详情页面，存在数据库的两张表中，我就可以开心的练习数据库了。 分析： 如果直接上手爬的话，不知道能拿到多少数据。之前在分析豆瓣阅读的时候就发现，在某一个tag下只能拿到50页的数据，也就是一个tag只能访问到1000本书。尽管是通过浏览器访问也是拿不到的。所以直接这样爬肯定有所限制。 豆瓣默认的排序大概加入了评价人数、分数、年份等等因素。我想做的是抛开一切因素，拿到这些数据。 标签分析：给出的大分类有形式、类型、地区、年代、特色五个分类。由于本次爬虫目标是电影，因此形式这里必须是选择电影了。而其他四个分类，各自都有许多标签，那么问题就来了： 如果我每一次请求都带上一个标签，就可以细化每次的请求，是不是可以尽可能拿到更多的数据？ 实现 tags设计 # tags # type包括了全部类型 type = [&#39;剧情&#39;,&#39;喜剧&#39;,&#39;动作&#39;,&#39;爱情&#39;,&#39;科幻&#39;,&#39;动画&#39;,&#39;悬疑&#39;,&#39;惊悚&#39;,&#39;恐怖&#39;,&#39;犯罪&#39;,&#39;同性&#39;,&#39;音乐&#39;,&#39;歌舞&#39;,&#39;传记&#39;,&#39;历史&#39;,&#39;战争&#39;,&#39;西部&#39;,&#39;奇幻&#39;,&#39;冒险&#39;,&#39;灾难&#39;,&#39;武侠&#39;,&#39;情色&#39;] # region包括了全部地区 region = [&#39;中国大陆&#39;,&#39;美国&#39;,&#39;中国香港&#39;,&#39;中国台湾&#39;,&#39;日本&#39;,&#39;韩国&#39;,&#39;英国&#39;,&#39;法国&#39;,&#39;德国&#39;,&#39;意大利&#39;,&#39;西班牙&#39;,&#39;印度&#39;,&#39;泰国&#39;,&#39;俄罗斯&#39;,&#39;伊朗&#39;,&#39;加拿大&#39;,&#39;澳大利亚&#39;,&#39;爱尔兰&#39;,&#39;瑞典&#39;,&#39;巴西&#39;,&#39;丹麦&#39;] # years包括了全部年代（通过80年代等可以判断这个字段接受的是字符串） years = [&#39;2019&#39;,&#39;2018&#39;,&#39;2010年代&#39;,&#39;2000年代&#39;,&#39;90年代&#39;,&#39;80年代&#39;,&#39;70年代&#39;,&#39;60年代&#39;,&#39;更早&#39;] # characteristics 包括了全部特色 characteristics = [&#39;经典&#39;,&#39;青春&#39;,&#39;文艺&#39;,&#39;搞笑&#39;,&#39;励志&#39;,&#39;魔幻&#39;,&#39;感人&#39;,&#39;女性&#39;,&#39;黑帮&#39;] 在设计tags的过程中我发现，在年代的列表中，只有2019年和2018年被区别对待了。原因很容易就能看出来，这两年比较接近现在。那如果想要重点对待某一年或者某一段时间，只需要自己再加上就好了。在这里可以看一下请求的链接形式： url = &#39;https://movie.douban.com/j/new_search_subjects?sort=U&amp;range=0,10&amp;tags=经典&amp;start=0&amp;countries=中国大陆&amp;year_range=2019,2019&#39;请求的URL包括一下几个参数： sort=U: 排序方式，可以选择以下几个： 符号 U S T R 含义 近期热门 评分最高 标记最多 最新上映 range=0,10 : 评分筛选，可以选择筛选的电影的评分区间，这里一般设置为7，10就可以筛选出来大部分好电影。有一个问题在于这里的0，10的数据类型是什么样的； tags=中国大陆： 这里的tags指的是前面设置的type； start=0: 即为偏移量。需要注意的地方是请求链接里不能设置步长，每次请求默认返回20个； countries: 地区，不多解释； year_range=2019,2019: 这个字段很有意思。我们发出的请求是2019，但是通过URL拼接就变成了一个元组一样的东西，表示了年份区间。因此在设置年份的时候可以有以下几个方式： # 年份设置 # 默认设置方式 years = [&#39;2019&#39;,&#39;2018&#39;,&#39;2010年代&#39;,&#39;2000年代&#39;,&#39;90年代&#39;,&#39;80年代&#39;,&#39;70年代&#39;,&#39;60年代&#39;,&#39;更早&#39;] # 生成一个从1960年到2019年的列表并转成字符串，加上一个更早的年份区间 years = [str(i) for i in range(1960,2020)] + [&#39;更早&#39;] # 将需要区别对待的年份单独列出,这里区别对待了90年代所有的年份 years = [&#39;2019&#39;,&#39;2018&#39;,&#39;2010年代&#39;,&#39;2000年代&#39;,&#39;80年代&#39;,&#39;70年代&#39;,&#39;60年代&#39;,&#39;更早&#39;] + [str(i) for i in range(1990,1999)]但是问题出现了：我们虽然在很努力的设置年份，但是忘了一件事情。在构造URL时，接收的参数是两个而不是一个，也就是说，years这个参数，需要两个列表来完成。也就是说，要写成如下形式： # 先设置前 year1 = [&#39;2019&#39;,&#39;2018&#39;,&#39;2014&#39;,&#39;2010&#39;,&#39;2005&#39;,&#39;2000&#39;,&#39;1995&#39;,&#39;1990&#39;...] # 再设置后 year2 = [&#39;2019&#39;,&#39;2018&#39;,&#39;2017&#39;,&#39;2013&#39;,&#39;2009&#39;,&#39;2004&#39;,&#39;1999&#39;,&#39;1994&#39;...]也就是说，两个需要互相对应，组成年份参数。比如我现在不需要特殊对待这两年，我只需要每隔五年用作一个区间就好了，那就可以用列表生成式。 year1 = [str(i) for i in range(1960,2016,5)] year2 = [str(i) for i in range(1964,2020,5)]生成的结果如下所示： [1960, 1965, 1970, 1975, 1980, 1985, 1990, 1995, 2000, 2005, 2010, 2015][1964, 1969, 1974, 1979, 1984, 1989, 1994, 1999, 2004, 2009, 2014, 2019] 正好一共12个区间。 好了现在可以生成URL了现在有下面几个参数： sort=T,即按照标记数量排序； range=7,10 即筛选7到10分之间的电影； tags, 按照type列表遍历； start=0, 当然是从0开始，但需要捕捉异常； countries 列表遍历； year1,year2按照两个年份列表遍历。 问题来了——这个问题看上去像是个3层嵌套循环 现在先用列表生成式： # type包括了全部类型 type = [&#39;剧情&#39;,&#39;喜剧&#39;,&#39;动作&#39;,&#39;爱情&#39;,&#39;科幻&#39;,&#39;动画&#39;,&#39;悬疑&#39;,&#39;惊悚&#39;,&#39;恐怖&#39;,&#39;犯罪&#39;,&#39;同性&#39;,&#39;音乐&#39;,&#39;歌舞&#39;,&#39;传记&#39;,&#39;历史&#39;,&#39;战争&#39;,&#39;西部&#39;,&#39;奇幻&#39;,&#39;冒险&#39;,&#39;灾难&#39;,&#39;武侠&#39;,&#39;情色&#39;] # region包括了全部地区 region = [&#39;中国大陆&#39;,&#39;美国&#39;,&#39;中国香港&#39;,&#39;中国台湾&#39;,&#39;日本&#39;,&#39;韩国&#39;,&#39;英国&#39;,&#39;法国&#39;,&#39;德国&#39;,&#39;意大利&#39;,&#39;西班牙&#39;,&#39;印度&#39;,&#39;泰国&#39;,&#39;俄罗斯&#39;,&#39;伊朗&#39;,&#39;加拿大&#39;,&#39;澳大利亚&#39;,&#39;爱尔兰&#39;,&#39;瑞典&#39;,&#39;巴西&#39;,&#39;丹麦&#39;] # 年份设置 year1 = [str(i) for i in range(1960,2016,5)] year2 = [str(i) for i in range(1964,2020,5)] base_url = &#39;https://movie.douban.com/j/new_search_subjects?sort=T&amp;range=7,10&amp;tags=电影&amp;start=0&amp;genres=&#39; # 先拼接type,得到一个长度为22的列表 t_url = [base_url + i for i in type] # 拼接region r_url = [t_url + &#39;&amp;countries=&#39; + i for i in region]好了还没开始就报错了，我像是个傻子. ps:字体设置在这里 这个问题更像是一个排列组合问题但不是。既然用了python那就要想方设法避免循环，更要避免循环嵌套。否则要慢的骂街。 这个问题，稍微计算一下：拼接完type的长度是22；那么拼接完地区，长度应该是22xlen(region)=22x21=462;接下来拼接年份，长度变成462x12 = 5544; 那么拼接就变成了下面这个样子 # 拼接region r_url = [t_url[j] + &#39;&amp;countries=&#39; + i for j in range(0,len(t_url)) for i in region] # 拼接年份 y_url = [r_url[j] + &#39;&amp;year_range=&#39; + year1[i] + &#39;,&#39; + year2[i] for j in range(0,462) for i in range(0,12)] 出现的新的问题，URL中含有中文改怎么解决，现在拼接成功的URL是下面这个样子： https://movie.douban.com/j/new_search_subjects?sort=T&amp;range=7,10&amp;tags=\\xe7\\x94\\xb5\\xe5\\xbd\\xb1&amp;start=0&amp;genres=\\xe5\\x89\\xa7\\xe6\\x83\\x85&amp;countries=\\xe4\\xb8\\xad\\xe5\\x9b\\xbd\\xe5\\xa4\\xa7\\xe9\\x99\\x86&amp;year_range=1960,1964 需要用到下面这种方法： from urllib import parse # type包括了全部类型 type = [&#39;剧情&#39;,&#39;喜剧&#39;,&#39;动作&#39;,&#39;爱情&#39;,&#39;科幻&#39;,&#39;动画&#39;,&#39;悬疑&#39;,&#39;惊悚&#39;,&#39;恐怖&#39;,&#39;犯罪&#39;,&#39;同性&#39;,&#39;音乐&#39;,&#39;歌舞&#39;,&#39;传记&#39;,&#39;历史&#39;,&#39;战争&#39;,&#39;西部&#39;,&#39;奇幻&#39;,&#39;冒险&#39;,&#39;灾难&#39;,&#39;武侠&#39;,&#39;情色&#39;] # region包括了全部地区 region = [&#39;中国大陆&#39;,&#39;美国&#39;,&#39;中国香港&#39;,&#39;中国台湾&#39;,&#39;日本&#39;,&#39;韩国&#39;,&#39;英国&#39;,&#39;法国&#39;,&#39;德国&#39;,&#39;意大利&#39;,&#39;西班牙&#39;,&#39;印度&#39;,&#39;泰国&#39;,&#39;俄罗斯&#39;,&#39;伊朗&#39;,&#39;加拿大&#39;,&#39;澳大利亚&#39;,&#39;爱尔兰&#39;,&#39;瑞典&#39;,&#39;巴西&#39;,&#39;丹麦&#39;] # 年份设置 year1 = [str(i) for i in range(1960,2016,5)] year2 = [str(i) for i in range(1964,2020,5)] base_url = &#39;https://movie.douban.com/j/new_search_subjects?sort=T&amp;range=7,10&amp;tags=电影&amp;start=0&amp;genres=&#39; # 先拼接type,得到一个长度为22的列表 t_url = [base_url + parse.quote(i) for i in type] r_url = [t_url[j] + &#39;&amp;countries=&#39; + parse.quote(i) for j in range(0,len(t_url)) for i in region] # 拼接年份 y_url = [r_url[j] + &#39;&amp;year_range=&#39; + year1[i] + &#39;,&#39; + year2[i] for j in range(0,462) for i in range(0,12)]测试 $ python3 &gt;&gt;&gt; from ..... &gt;&gt;&gt; y_url[0] &#39;https://movie.douban.com/j/new_search_subjects?sort=T&amp;range=7,10&amp;tags=电影&amp;start=0&amp;genres=%E5%89%A7%E6%83%85&amp;countries=%E4%B8%AD%E5%9B%BD%E5%A4%A7%E9%99%86&amp;year_range=1960,1964&#39;BINGO!到此为止生成了5544个URL，下一步就是取了。","categories":[{"name":"学习","slug":"学习","permalink":"http://xiaoguiwk.xyz/categories/学习/"}],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"http://xiaoguiwk.xyz/tags/爬虫/"},{"name":"豆瓣","slug":"豆瓣","permalink":"http://xiaoguiwk.xyz/tags/豆瓣/"},{"name":"异步","slug":"异步","permalink":"http://xiaoguiwk.xyz/tags/异步/"},{"name":"Markdown字体","slug":"Markdown字体","permalink":"http://xiaoguiwk.xyz/tags/Markdown字体/"},{"name":"Markdown表格","slug":"Markdown表格","permalink":"http://xiaoguiwk.xyz/tags/Markdown表格/"},{"name":"Markdown图片","slug":"Markdown图片","permalink":"http://xiaoguiwk.xyz/tags/Markdown图片/"}]},{"title":"服务器笔记","slug":"服务器笔记","date":"2019-08-20T05:44:45.000Z","updated":"2019-08-20T15:59:45.403Z","comments":true,"path":"2019/08/20/服务器笔记/","link":"","permalink":"http://xiaoguiwk.xyz/2019/08/20/服务器笔记/","excerpt":"主要记录Linux系统在使用过程中碰到的问题及一些解决办法。包括各个有可能的方面。","text":"主要记录Linux系统在使用过程中碰到的问题及一些解决办法。包括各个有可能的方面。 连接ssh 输入ssh -p 22 root@101.200.86.233它会提示你输入密码,输入正确的密码之后,你就发现已经登陆成功了.(22: 端口号 root: 用户名)后台运行 Nohup python3 main.py &amp;，输入命令后回车退出 查看输出内容：tail -f nohup.out 关闭：ps -aux | grep “users.py”查看tid，kill tid 查看后台程序：jobs -l（这是L）screen,后台运行的最佳解决方案 创建新的screen：Screen -a x (x是名称) 查看已有screen：Screen -ls Screen -x 6149 恢复pid是6149的screen screen -x user 恢复名称为user的screen screen -X -S 6149 quit 关闭 或者kill 6149即可关闭设置交换空间https://cloud.tencent.com/developer/article/1342505查找文件find / -name php.inivim查找字符串 默认大小写敏感(可以调整)，在normal模式下：esc+:+/+关键字如：$ :/max回车即可。n查找下一个，N查找上一个； 如果默认为大小写敏感，在查询语句后加\\c即为忽略大小写，如：$ :/max\\c即可。","categories":[{"name":"服务器","slug":"服务器","permalink":"http://xiaoguiwk.xyz/categories/服务器/"}],"tags":[{"name":"服务器","slug":"服务器","permalink":"http://xiaoguiwk.xyz/tags/服务器/"},{"name":"ubuntu","slug":"ubuntu","permalink":"http://xiaoguiwk.xyz/tags/ubuntu/"}]},{"title":"diamond","slug":"diamond","date":"2019-08-19T16:10:49.000Z","updated":"2019-08-20T16:08:33.126Z","comments":true,"path":"2019/08/20/diamond/","link":"","permalink":"http://xiaoguiwk.xyz/2019/08/20/diamond/","excerpt":"吹一波Diamond！","text":"吹一波Diamond！","categories":[],"tags":[{"name":"pictures","slug":"pictures","permalink":"http://xiaoguiwk.xyz/tags/pictures/"}]},{"title":"hexo坑与笔记","slug":"hexo坑与笔记","date":"2019-08-18T05:44:45.000Z","updated":"2019-08-18T08:10:07.982Z","comments":true,"path":"2019/08/18/hexo坑与笔记/","link":"","permalink":"http://xiaoguiwk.xyz/2019/08/18/hexo坑与笔记/","excerpt":"hexo安装起来倒是挺快的，可是如果想要高程度自定义和美化自己的博客，很多地方都要下功夫。像我这种不懂得前端代码甚至markdown都写的马马虎虎的人，就有点费劲了。","text":"hexo安装起来倒是挺快的，可是如果想要高程度自定义和美化自己的博客，很多地方都要下功夫。像我这种不懂得前端代码甚至markdown都写的马马虎虎的人，就有点费劲了。 安装整个安装过程非常顺利，根据网上的教程和官网文档来做的，大概是以下几个步骤。1.安装并配置git brew install git2.安装nvm #用来安装Node.js wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | sh 3.安装Node.js nvm install stable4.安装Hexo npm install -g hexo-cli5.到这里差不多可以启动了，在_config.yml中设置几个参数，就可以启动了。hexo d直接部署。 域名我到腾讯云买了一个域名xiaoguiwk.xyz年付11块钱。没想到还要实名认证，感觉得需要个三四天了。绑定域名有几个步骤：1.在GitHub上的xiaoguiwk.github.io项目中，打开settings，往下拉看到Github Pages，在custom domain中填上自己的域名，save;2.打开腾讯云控制台，解析域名，填上xiaoguiwk.github.io的ip地址。ip的获取方法是ping一下…….这里其实是有问题的，GitHub好像并不会给每个用户一个固定IP地址。有人说可以把自己的域名解析到GitHub的二级域名下，但腾讯云好像并不支持这么做。3.对了根目录要建一个CNAME填上域名。 在跟目录下不行，直接导致的结果就是每次hexo d之后就要上settings页面设置域名。正确的做法是在source目录下创建CNAME文件填上自己的域名。 不过有一点好的是好像是直接就可以用了，可能不直接实名认证的话过几天就上不了了。4.证书设置我还不知道怎么设置。 主题主题采用的是Nexmoe的主题，安装过程比较顺利，主要是安装完成后出现了一点小问题————代码块被识别成为了表格。查来查去没有找到答案，最后在主题GitHub的issue中找到了答案，原来是默认的代码高亮与主题的代码高亮产生了冲突。错误如下图： 解决办法是关掉默认的代码高亮。打开_config.yml修改如下： highlight: enable: false line_number: false auto_detect: false tab_replace:文章封面图文章封面图的添加比较简单，在创建文章之前找好一张图，记下图片地址。 $ hexo n &quot;hexo坑与笔记&quot;然后打开文章，在顶部添加cover。 --- title: hexo坑与笔记 date: 2019-08-18 13:44:45 tags: hexo theme cover: https://images6.alphacoders.com/766/766327.jpg ---评论系统livere易于设置，步骤如下： 注册livere帐号； 安装City版本； 复制uid到主题配置文件_config.yml中: comment: livere livere: data_uid: MTAyMC80NjE0OC8yMjY1OQ== 域名实名认证成功后记得改自己的域名。 站长统计如下： analytics: # 统计系统，目前支持 Google analytics.js 统计、Google Tag Manager 统计、CNZZ 统计、腾讯统计、51.La统计、百度统计 google_site_id: #&lt;ID&gt; gtags_site_id: #&lt;ID&gt; cnzz_site_id: 1277935893 tencent_site_id: #&lt;ID&gt; la_site_id: #&lt;ID&gt; baidu_site_id: #&lt;ID&gt; gtm_container_id: #&lt;ID&gt;域名实名认证成功后记得改自己的域名。 头像与网站iconavatar: /images/avatar.png # 网站 Logo background: https://i.loli.net/2019/01/13/5c3aec85a4343.jpg # 既是博客的背景，又是文章默认头图 favicon: href: /images/favicon.ico # 网站图标 type: image/png # 图标类型，可能的值有(image/png, image/vnd.microsoft.icon, image/x-icon, image/gif)其中，avatar.png是头像，favicon.ico是网站图标。 插入图片注意事项图片插入的格式为: {% img /images/hexo坑与笔记/1.png \"代码块错误\" %} {% img}是固定的； /images/1.png 是图片的地址，images前面一定要加/，images文件夹放在source文件夹下面； “代码块错误”是图片描述，图挂了会显示 tags设置这种方法是成功不了的。。。 tags: themes hexo正确的方法应该是这样设置tags： tags: - themes - hexomarkdown语法坑 不会就赶紧去学，先照着这个https://www.jianshu.com/p/191d1e21f7ed； 列表输入完成之后一定要空行，不然后面全都缩进了； 也就是说这一行和上一行在编辑的时候中间有一个空行。 markdown的插入图片的方式不适用，如果想用的话需要安装插件。 代码块的插入方式有两种，一种是反引号引用，另一种是codeblock，如下： {% codeblock lang:objc %} [rectangle setX: 10 y: 10 width: 20 height: 20]; {% endcodeblock %}其中，lang是指定语言。 暂时先记这么多吧。","categories":[{"name":"hexo","slug":"hexo","permalink":"http://xiaoguiwk.xyz/categories/hexo/"}],"tags":[{"name":"themes","slug":"themes","permalink":"http://xiaoguiwk.xyz/tags/themes/"},{"name":"hexo","slug":"hexo","permalink":"http://xiaoguiwk.xyz/tags/hexo/"}]},{"title":"服务器环境配置","slug":"服务器环境配置","date":"2019-08-17T13:06:58.000Z","updated":"2019-08-18T06:34:51.810Z","comments":true,"path":"2019/08/17/服务器环境配置/","link":"","permalink":"http://xiaoguiwk.xyz/2019/08/17/服务器环境配置/","excerpt":"一台新租的服务器需要更新、配置常用环境。把这些事情记录下来以后就可以有个样板了。","text":"一台新租的服务器需要更新、配置常用环境。把这些事情记录下来以后就可以有个样板了。 1.更新$ su #获取管理员权限 password: #输入密码 $ apt-get update #更新软件列表 $ apt-get upgrade #更新软件 2.安装redis2.1安装Redis$ apt-get install redis-server -y #安装redis服务器 $ redis-server -v #查看redis版本 2.2 启动redis$ redis-server #启动redis服务器 $ redis-cli #启动redis客户端 127.0.0.1:6379&gt; ping PONG #即为连接成功2.3 后台运行1）修改配置文件 $ vim /etc/redis/redis.conf 将daemonize no 改为 yes $ redis-server redis.conf 结果发现不好使；2）使用守护进程 $ redis-server &amp; &lt;打印信息&gt; Ctrl+C即可后台运行 2.4 关闭redis-cli shutdown 3.错误处理Errors were encountered while processing: redis-server E: Sub-process /usr/bin/dpkg returned an error code (1) 解决办法： $ cd /var/lib/dpkg $ sudo mv info info.bak $ sudo mkdir info $ sudo apt-get upgrade 4.更新Python环境$ apt-get upgrade python3 3.6提示不用更新。。。 5.Git6.Python 安装pip $ apt install python3-piprequests bs4 pandas numpy scrapy aiohttp pymysql(需要先安装mysql) 7.Lnmp8.docker8.1 安装 安装以下包以使apt可以通过HTTPS使用存储库（repository）： $ sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common 添加Docker官方的GPG密钥： $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - 使用下面的命令来设置stable存储库： $ sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot; 再更新一下apt包索引： $ sudo apt-get update 安装最新版本的Docker CE： $ sudo apt-get install -y docker-ce8.2 启动 查看docker服务是否启动： $ systemctl status docker 即为已启动，如未启动， $ sudo systemctl start docker 验证docker服务： sudo docker run hello-world","categories":[],"tags":[{"name":"服务器","slug":"服务器","permalink":"http://xiaoguiwk.xyz/tags/服务器/"},{"name":"环境配置","slug":"环境配置","permalink":"http://xiaoguiwk.xyz/tags/环境配置/"},{"name":"ubuntu","slug":"ubuntu","permalink":"http://xiaoguiwk.xyz/tags/ubuntu/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-08-17T12:10:43.325Z","updated":"2019-08-18T05:14:56.006Z","comments":true,"path":"2019/08/17/hello-world/","link":"","permalink":"http://xiaoguiwk.xyz/2019/08/17/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}